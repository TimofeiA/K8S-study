kubectl version                                           To COPY PASTE in docker playground  use:  Ctrl + insert and shift + insert
minikube start                                                                                                    
docker version
docker-compose -v
git clone https://github.com/jpetazzo/container.training    --k8s learning resourse--
kubectl get --raw='/readyz?verbose'     --check health--
minikube stop
minikube start --memory 5120 --cpus=4
minikube start --vm-driver="virtualbox"
kubectl cluster-info               --information--
kubectl get nodes
kubectl get nodes --show-labels
kubectl describe pod myapp-pod
kubectl label node node3 node-role.kubernetes.io/worker=                --how to label the node--
---Windows---
"""set HTTP_PROXY=http://<proxy hostname:port>
set HTTPS_PROXY=https://<proxy hostname:port>
set NO_PROXY=localhost,127.0.0.1,10.96.0.0/12,192.168.59.0/24,192.168.49.0/24,192.168.39.0/24"""
----------------------------------------------------------------------------------------------------------------------
kubectl get events -o wide   ---check the events---
kubectl apply -f /path/to/config-files     ---declarative way to create objects---
kubectl run nginx --image=nginx        ---create pod from nginx image---
kubectl run redis --image=redis:alpine --labels="tier=db" 
kubectl get pod webapp -o jsonpath='{.spec.containers[*].name}'   ---This command lists the names of all the containers in the pod.---
kubectl create -f webapp-pod.yaml        ---create pod from a file---
kubectl set image pod/redis  redis=redis:latest  ---edit pod inline---
kubectl get pods -o wide    ---check wide verson output---
kubectl get pods -n kube-system  ---check components in the service namespace---
kubectl get pods --namespace=kube-system     ---get pods for specific namespace(e.g kube-system)---
kubectl get pods --all-namespaces           ---get pods in all namespaces---
kubectl config set-contex $(kubectl config current-context) --namespace=dev    ---switch permanently to "dev" namespace---
kubectl run redis --image=redis --dry-run=client -o yaml       ---output in yaml format while create a pod---
kubectl get replicaset       ---get replicaset---
kubectl replace -f replica_set.yml           ---replace pods when you changed the file parameters---
kubectl logs new-replica-set-cbdfj           ---check logs on a pod---
kubectl edit replicaset new-replica-set      ---edit replicaset---
kubectl scale --replicas=6 deployment -l app=myapp  ---scale on air---
kubectl scale rs new-replica-set --replicas=2       ---scale by resource name---
controlplane ~ ➜  kubectl get namespaces | tail -n +2| wc -l     ---count lines except the first one---
kubectl get all --selector env=prod --no-headers |wc -l           ---get all resources with label "prod" with no headers and count the lines---
kubectl get pods --selector "bu=finance,env=prod,tier=frontend"   ---multilabel search---
kubectl get pod webapp -o yaml > my-new-pod.yaml                  ---to extract the pod definition in YAML format to a file using the command---
------------------------starting nginx server--------------------------------------
kubectl run nginx-pod --image=nginx --restart=Never --port=80 -n default
kubectl expose pod nginx-pod --type=NodePort --port=80 --name=nginx-service   ---externally access allowed---
kubectl get svc    ---verify the service is created---
minikube service nginx-service --url       ---to get url---
kubectl delete service nginx-service  ---to delete service---
------------------------------------------------------------------------------------
Create a deployment
kubectl create deployment --image=nginx nginx
Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml
kubectl create deployment --image=nginx nginx --replicas=4 --dry-run=client -o yaml > nginx-deployment.yaml 
kubectl expose deployment nginx --port 80
kubectl scale deployment nginx --replicas=6
kubectl edit deployment nginx
kubectl set image deployment nginx nginx=nginx:1.18
-------------------------------------------------------------------------------------------------------
Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379:
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
kubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml
-------------------------------------------------------------------------------------------------------
kubectl taint nodes node-name key=value:taint-effect  ---taint the node---
kubetcl taint nodes node1 app=blue:NoSchedule         ---example--- NoSchedule| PreferNoSchedule | NoExecute
kubectl taint node controlplane node-role.kubernetes.io/control-plane:NoSchedule-      ---to remove the taint just add "-" at the end---
kubectl label nodes node-1 size=Large     ---How to label nodes for specific nodeSelector in a pod---

controlplane ~ ➜  kubectl get daemonsets -A   ---check daemonset---
kubectl get events -o wide                     ---check events---
kubectl logs my-custom-scheduler --name-space=kube-system      ---check scheduler logs---
kubectl create configmap my-scheduler-config --from-file /root/my-scheduler-config.yaml -n kube-system    ---create configmap---
kubectl get configmap my-scheduler-config -n kube-system              ---check configmap---
kubectl exec kube-apiserver-controlplane -n kube-system -- kube-apiserver -h| grep enable-admission-plug  ---check admission plugins--
ps -ef | grep kube-apiserver | grep admission-plugins   ---check plugins on pod in kube-adm way---

controlplane ~ ➜  k  -n webhook-demo create secret tls webhook-server-tls \
> --cert "/root/keys/webhook-server-tls.crt" \
> --key "/root/keys/webhook-server-tls.key"
-------------------------------------------------------------------------------------------------------------
k get all --all-namespaces -o yaml > all-deploy-services.yaml    ---to save all objects to file---
etcdctl version
----To take a snapshot from a running etcd server---:
    ETCDCTL_API=3 etcdctl \
      --endpoints=https://127.0.0.1:2379 \
      --cacert=/etc/kubernetes/pki/etcd/ca.crt \
      --cert=/etc/kubernetes/pki/etcd/server.crt \
      --key=/etc/kubernetes/pki/etcd/server.key \
      snapshot save /backup/etcd-snapshot.db

---to restore---:
    etcdutl snapshot restore /backup/etcd-snapshot.db \
      --data-dir /var/lib/etcd-restored
----------------------------------------------------------------------------------------------------------------
kubectl auth can-i delete nodes    ---to check the permissions---
kubectl auth can-i create pods --as dev-user
kubectl get pods --as dev-user
kubectl describe rolebinding kube-proxy -n kube-system     ---to check rolebindin---
kubectl create role developer --namespace=default --verb=list,create,delete --resource=pods     ---to create a role with permission---
kubectl create rolebinding dev-user-binding --namespace=default --role=developer --user=dev-user     ---to bind a role to user(dev-user here)---
